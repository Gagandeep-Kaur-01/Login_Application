{"version":3,"sources":["store/UserStore.js","Form/InputField.js","Form/SubmitButton.js","Form/LoginForm.js","App.js","reportWebVitals.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","mgs","console","log","setInputValue","doLogin","App","doLogout","observer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAee,MAVX,aAAe,oBACXA,YAAiBC,KAAM,CAEnBC,SAAS,EACTC,YAAY,EACZC,SAAU,M,QCSPC,E,uKAfH,IAAD,OACT,OACE,qBAAKC,UAAU,aAAf,SACE,uBAAOA,UAAU,QACjBC,KAAON,KAAKO,MAAMD,KAClBE,YAAaR,KAAKO,MAAMC,YACxBC,MAAOT,KAAKO,MAAME,MAClBC,SAAW,SAACC,GAAD,OAAO,EAAKJ,MAAMG,SAASC,EAAEC,OAAOH,gB,GAT5BI,IAAMC,WCmBhBC,E,uKAjBH,IAAD,OACT,OACE,qBAAKV,UAAU,eAAf,SAEE,wBACIA,UAAU,MACVW,SAAUhB,KAAKO,MAAMS,SACrBC,QAAU,kBAAM,EAAKV,MAAOU,WAHhC,SAKKjB,KAAKO,MAAMW,a,GAXKL,IAAMC,WC6GlBK,E,kDAxGb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,MAAQ,CACXjB,SAAU,GACVkB,SAAU,GACVC,gBAAgB,GALD,E,0DASLC,EAAUC,IACtBA,EAAMA,EAAIC,QACHC,OAAS,IAGhB1B,KAAK2B,SAAL,eACGJ,EAAWC,M,kCAKdxB,KAAK2B,SAAS,CACZxB,SAAU,GACVkB,SAAU,GACVC,gBAAgB,M,qJAMbtB,KAAKoB,MAAMjB,S,oDAGXH,KAAKoB,MAAMC,S,wDAIhBrB,KAAK2B,SAAS,CACZL,gBAAgB,I,kBAKAM,MAAM,SAAU,CAC9BC,OAAQ,OACRC,QAAS,CACP,OAAW,mBACX,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnB9B,SAAUH,KAAKoB,MAAMjB,SACrBkB,SAAUrB,KAAKoB,MAAMC,a,cARrBa,E,iBAYeA,EAAIC,O,SAAnBC,E,SACSA,EAAOC,SAClBC,EAAUpC,YAAa,EACvBoC,EAAUnC,SAAWiC,EAAOjC,UAGrBiC,IAA6B,IAAnBA,EAAOC,UACxBrC,KAAKuC,YACLC,MAAMJ,EAAOK,M,kDAMbC,QAAQC,IAAR,MACA3C,KAAKuC,Y,+IAKD,IAAD,OACT,OACE,sBAAKlC,UAAU,YAAf,mBAGE,cAAC,EAAD,CACEC,KAAK,OACLE,YAAY,WACZC,MAAOT,KAAKoB,MAAMjB,SAAWH,KAAKoB,MAAMjB,SAAW,GACnDO,SAAY,SAACc,GAAD,OAAS,EAAKoB,cAAc,WAAYpB,MAGtD,cAAC,EAAD,CACElB,KAAK,WACLE,YAAY,WACZC,MAAOT,KAAKoB,MAAMC,SAAWrB,KAAKoB,MAAMC,SAAW,GACnDX,SAAY,SAACc,GAAD,OAAS,EAAKoB,cAAc,WAAYpB,MAGtD,cAAC,EAAD,CACIN,KAAK,QACLF,SAAUhB,KAAKoB,MAAME,eACrBL,QAAU,kBAAM,EAAK4B,oB,GAlGPhC,IAAMC,WCExBgC,G,mUAMgBlB,MAAM,cAAe,CACnCC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,sB,cAJhBI,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEUA,EAAOC,SACjBC,EAAUrC,SAAU,EACpBqC,EAAUpC,YAAa,EACvBoC,EAAUnC,SAAWiC,EAAOjC,WAI9BmC,EAAUrC,SAAU,EACpBqC,EAAUpC,YAAa,G,kDAMzBoC,EAAUrC,SAAU,EACpBqC,EAAUpC,YAAa,E,4RAQP0B,MAAM,UAAW,CAC/BC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,sB,cAJhBI,E,gBAQeA,EAAIC,O,QAAnBC,E,SAEUA,EAAOC,UACnBC,EAAUpC,YAAa,EACvBoC,EAAUnC,SAAW,I,kDAKxBuC,QAAQC,IAAR,M,+IAIO,IAAD,OAEP,OAAIL,EAAUrC,QAEV,qBAAKI,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,yCASDiC,EAAUpC,WAET,qBAAKG,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,oBACUiC,EAAUnC,SAElB,cAAC,EAAD,CACGe,KAAM,UACNF,UAAU,EACVC,QAAU,kBAAM,EAAK8B,mBAS9B,qBAAK1C,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,Y,GA9FMQ,IAAMC,YAuGTkC,cAASF,GClGTG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a63cb066.chunk.js","sourcesContent":["import { extendObservable } from \"mobx\";\r\n\r\n//UserStore\r\n\r\nclass UserStore {\r\n    constructor() {\r\n        extendObservable(this, {\r\n\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username: ''\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();\r\n\r\n","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n\r\n  render() {\r\n  return (\r\n    <div className=\"inputField\">\r\n      <input className=\"input\"\r\n      type= {this.props.type}\r\n      placeholder={this.props.placeholder}\r\n      value={this.props.value}\r\n      onChange={ (e) => this.props.onChange(e.target.value) }\r\n     />  \r\n      \r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n  render() {\r\n  return (\r\n    <div className=\"submitButton\">\r\n\r\n      <button\r\n          className=\"btn\"\r\n          disabled={this.props.disabled}\r\n          onClick={ () => this.props. onClick() }\r\n      >\r\n          {this.props.text}\r\n      </button>\r\n\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default SubmitButton;\r\n","import React from 'react';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport UserStore from '../store/UserStore';\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      buttonDisabled: false\r\n    }\r\n  }\r\n\r\n  setInputValue(property, val) {\r\n    val = val.trim();\r\n    if(val.length > 12) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      [property]: val\r\n    })\r\n  }\r\n\r\n  resetForm() {\r\n    this.setState({\r\n      username: '',\r\n      password: '',\r\n      buttonDisabled: false\r\n    })\r\n  }\r\n\r\n  async doLogin() {\r\n\r\n    if (!this.state.username) {\r\n      return;\r\n    }\r\n    if (!this.state.password) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      buttonDisabled: true      \r\n    })\r\n\r\n    try {\r\n\r\n      let res = await fetch('/login', {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept' : 'application/json',\r\n          'Content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          username: this.state.username,\r\n          password: this.state.password\r\n        })\r\n      });\r\n\r\n      let result = await res.json();\r\n      if(result && result.success) {\r\n        UserStore.isLoggedIn = true;\r\n        UserStore.username = result.username;\r\n      }\r\n\r\n      else if (result && result.success === false) {\r\n        this.resetForm();\r\n        alert(result.mgs);\r\n      }\r\n\r\n    }\r\n\r\n    catch(e) {\r\n        console.log(e);\r\n        this.resetForm();\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n  return (\r\n    <div className=\"loginForm\">\r\n\r\n      Log in \r\n      <InputField\r\n        type='text'\r\n        placeholder='Username'\r\n        value={this.state.username ? this.state.username : ''}\r\n        onChange= { (val) => this.setInputValue('username', val) }\r\n      /> \r\n\r\n      <InputField\r\n        type='password'\r\n        placeholder='Password'\r\n        value={this.state.password ? this.state.password : ''}\r\n        onChange= { (val) => this.setInputValue('password', val) }\r\n      />       \r\n\r\n      <SubmitButton\r\n          text='Login'\r\n          disabled={this.state.buttonDisabled}\r\n          onClick={ () => this.doLogin()}\r\n      /> \r\n         \r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\nimport { observer } from 'mobx-react'\nimport UserStore from './store/UserStore'\nimport LoginForm from './Form/LoginForm'\nimport SubmitButton from './Form/SubmitButton'\nimport './App.css';\n\nclass App extends React.Component {\n\n  async componentDidMount() {\n\n    try {\n\n      let res = await fetch('/isLoggedIn', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n\n      if (result && result.success) {\n          UserStore.loading = false;\n          UserStore.isLoggedIn = true;\n          UserStore.username = result.username;\n      }\n\n      else {        \n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n      }\n\n    }\n\n    catch(e) {\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n  }  \n\n  async doLogout() {\n\n    try {\n\n      let res = await fetch('/logout', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n    }\n\n    catch(e) {\n     console.log(e)\n    }\n  }\n\n  render() {\n\n    if (UserStore.loading) {\n      return (\n        <div className=\"app\">\n          <div className='container'>\n            Loading, please wait.....\n          </div>         \n        </div>         \n      )\n    }\n    \n    else {\n\n      if(UserStore.isLoggedIn) {\n        return (\n          <div className=\"app\">\n            <div className='container'>\n              Welcome{UserStore.username}\n\n              <SubmitButton\n                 text={'Log out'}\n                 disabled={false}\n                 onClick={ () => this.doLogout() }\n              />\n\n            </div>         \n          </div>         \n        )\n      }\n\n      return (\n        <div className=\"app\">\n          <div className='container'>\n            <LoginForm />\n          </div>\n        </div>\n      );\n    }\n    \n  }\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}